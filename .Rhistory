?dim()
?tail()
?mosaicplot()
?mosaicplot()
?summary()
?help
Q6 <- rnorm(1000)^2
?plot()
q
quit
exit
q()
x <- 0:30 ; plot(x, dbinom(x, 30, 0.5), type = "h")
q()
x <- 0:2 ; plot(x, dbinom(x, 2, 0.5), type = "h")
x <- 0:2 ;
x <- 0:2 ;
x <- 0:2 ;
plot(x, dbinom( ), type = "h", col = "red", lwd=10, main="Probability that X patients are cured")
What does the result look like?
Set the green circle on one of the four graphs below by clicking on it.
plot(x, dbinom( ), type = "h", col = "red", lwd=10, main="Probability that X patients are cured")
plot(x, dbinom(x,2,0.7), type = "h", col = "red", lwd=10, main="Probability that X patients are cured")
?prob()
?probability()
?probability
??probability
90/10=
//??
p(x)=90/10
x<-90/10
x
x<-sqrt(90/10)
x
??random probability
??random
dbinom(x,2,0.7)
plot(x, dbinom( ), type = "h", col = "red", lwd=10, main="Probability that X patients are cured")
?package
??package
x<-10/90
x
pnorm(190, 182, 7)
zprob
Z prob
#simple z table
x<-seq(0,3,0.1)
z<-round(pnorm(x,0,1),4)
ztable <- cbind(z=x,prob=z)
head(ztable)
x <-seq(-4,4,0.1);y <-dnorm(x);plot(x,y,type="l");
x.points <-seq(-4,1,0.1);y.points <-dnorm(x.points)
polygon(c(x.points,1),c(y.points,0),col="blue")
polygon(c(x.points,1),c(y.points,0),col=blue)
polygon(x.points,y.points,col="blue")
polygon(x,y,col="blue")
bplots(age,weight,height,gender)
hist(23,45,5,1)
boxplot(10:15)
boxplot(10,15)
hist(10,15)
boxplot(10,15)
boxplot(10:15)
set.seed(200)
instrument1 <- round(rnorm(20,6,0.5),3)
instrument2 <- round(rnorm(20,6,2),3)
comparemethods <- cbind(instrument1, instrument2); boxplot(comparemethods)
comparemethods <- cbind(instrument1, instrument2); boxplot(comparemethods)
read.csv("BlandAltman.csv")
BlandAltman <- function(f) {
#read in a file to a data.frame
PEF <- read.csv(f)
#calculate S(x,y)
PEF$Sx <- (PEF[,1]+PEF[,2])/2
PEF$Sy <- PEF[,1]-PEF[,2]
#Draw a graph The argument ylim decides the lowest and highest y-axis values
plot(PEF$Sx,PEF$Sy, ylim=c(mean(PEF$Sy)-2.2*sd(PEF$Sy), mean(PEF$Sy)+2.2*sd(PEF$Sy)),
ylab="Difference
in PEFR (L/min)", xlab="Average PEF by two meters (L/min)", pch=20,
main="Difference against mean for PEFR data")
#Add lines
abline(h=mean(PEF$Sy), lty=3)
abline(h=mean(PEF$Sy)+1.96*sd(PEF$Sy), lty=2)
abline(h=mean(PEF$Sy)-1.96*sd(PEF$Sy), lty=2)
}
BlandAltman("BlandAltman.csv") #File must be in working directory
set.seed(278)
x <- rnorm(25, mean=100, sd=10)
y <- 2 * x + 20 + rnorm(25, mean=10, sd=4)
plot(x,y)  #Do you think a linear model would fit?
cor(x,y)  #If you just want the correlation coefficient
cor(x,y)^2 #Or the coefficient of determination
lm.obj <- lm(y~x) # See how models are described in R. y depends on x
abline(lm.obj)    #We can add the regression line to the scatterplot
predict(lm.obj) #The predicted y-values for your x-values
points(x,predict(lm.obj), col="green") #Add predicted values to the graph
summary(lm.obj)   #Lets look at the content of lm.obj
str(lm.obj)
plot(x,y)  #Do you think a linear model would fit?
cor(x,y)  #If you just want the correlation coefficient
cor(x,y)^2 #Or the coefficient of determination
lm.obj <- lm(y~x) # See how models are described in R. y depends on x
abline(lm.obj)    #We can add the regression line to the scatterplot
predict(lm.obj) #The predicted y-values for your x-values
points(x,predict(lm.obj), col="green") #Add predicted values to the graph
summary(lm.obj)   #Lets look at the content of lm.obj
cor(x,y)  #If you just want the correlation coefficient
lm.obj$coefficients  #You may want to collect the coefficients
par(mfrow=c(2,2)) #prepare for a 2x2 layout
plot(lm.obj) #The built in controls for your regression analysis
par(mfrow=c(1,1)) #Restore 1x1 layout
x1 <- 1:100
y1 <- x1^2
y1 <- x1^2
x1 <- 1:100
plot(lm.obj) #The built in controls for your regression analysis
q()
x <- 0:2
plot(x, dbinom(x, 2, 0.5), type = "h", col = "blue",
lwd=4, ylim= c(0,0.6))
curve(dnorm(x, 1, 0.8), add=T)
x <- 0:8
plot(x, dbinom(x, 8, 2), type = "h", col = "blue",
lwd=4, ylim= c(0,0.6))
plot(x, dbinom(x, 8, 0.5), type = "h", col = "blue",
plot(x, dbinom(x, 8, 0.5), type = "h", col = "blue",
plot(x, dbinom(x, 8, 0.5), type = "h", col = "blue",
plot(x, dbinom(x, 8, 0.5), type = "h", col = "blue",
plot(x, dbinom(x, 8, 0.5), type = "h", col = "blue",
x<-0:8
plot(x, dbinom(x, 8, 0.5), type = "h", col = "blue",
lwd=4, ylim= c(0,0.6))
curve(dnorm(x, 4, 1.5), add=T)
# simple Z table
x<-seq(0,3,0.1)
z<-round(pnorm(x,4,1.5),2)
ztable<-cbind(z=x,prob=2)
head(ztable)
ztable<-cbind(z=x,prob=z)
head(ztable)
x <- 0:30plot(x, dbinom(x, 30, 0.5), type = "h", col = "blue", lwd=4, ylim= c(0,0.15))
curve(dnorm(x, 15, 2.8), add=T)
x<-0:30
x <- 0:30plot(x, dbinom(x, 30, 0.5), type = "h", col = "blue", lwd=4, ylim= c(0,0.15))
x<-0:30plot(x, dbinom(x, 30, 0.5), type = "h", col = "blue", lwd=4, ylim= c(0,0.15))
x<-0:30 plot(x, dbinom(x, 30, 0.5), type = "h", col = "blue", lwd=4, ylim= c(0,0.15))
??standard deviation
? std
help("standard deviation")
help("standard deviation")
??standard deviation()
set.seed(400)
NORMAL <- rnorm(10000)
UNIFORM <- runif(10000)
SKEWED <- rep(1:140, 1:140)
opar <- par() #Save original par settings. Read ?par() if you like
par(mfrow= c(3,1)) #Ask for three columns and one row in the graph
hist(NORMAL)
hist(UNIFORM)
hist(SKEWED)
par(opar) #Reset the graph parameters
#Reset can also be achieved by closing the Graphics window
Calculate the mean and the median
set.seed(400)
NORMAL <- rnorm(10000)
UNIFORM <- runif(10000)
SKEWED <- rep(1:140, 1:140)
opar <- par() #Save original par settings. Read ?par() if you like
par(mfrow= c(3,1)) #Ask for three columns and one row in the graph
hist(NORMAL)
hist(UNIFORM)
hist(SKEWED)
par(opar) #Reset the graph parameters
#Reset can also be achieved by closing the Graphics window
Calculate the mean and the median
set.seed(400)
NORMAL <- rnorm(10000)
UNIFORM <- runif(10000)
SKEWED <- rep(1:140, 1:140)
opar <- par() #Save original par settings. Read ?par() if you like
par(mfrow= c(3,1)) #Ask for three columns and one row in the graph
hist(NORMAL)
hist(UNIFORM)
hist(SKEWED)
par(opar)
par(mfrow= c(3,1)) #Ask for three columns and one row in the graph
sampl <- vector() #Create an empty vector
for(i in 1:1000) #Start a loop with 1000 rounds
sampl <- c(sampl, mean(sample(NORMAL, 3, replace=T)))
#fill sampl with sampl, and the mean of three random items from NORMAL
mean(sampl)
sd(sampl)
hist(sampl, xlim = c(-2, 2), main = " n = 3 " )
sampl <- vector()
for(i in 1:1000)
sampl <- c(sampl, mean(sample(NORMAL, 6, replace=T)))
mean(sampl)
sd(sampl)
hist(sampl, xlim = c(-2, 2), main = " n = 6 " )
sampl <- vector()
for(i in 1:1000)
sampl <- c(sampl, mean(sample(NORMAL, 300, replace=T)))
mean(sampl)
sd(sampl)
sd(sampl)/sqrt(300)
sd(sampl)*sqrt(300)
sd(sampl)^2
sd(sampl)*sqrt(300)
x <- rnorm(100000)
y <- rnorm(100000)
z <- rep(NA, 100000) #z is created empty but with a given size.
system.time({
for (i in 1:100000) {
z[i] <- x[i] + y[i]
}
})
system.time( k <- x + y )
set.seed(897)
ME <- matrix(rnorm(24000),nrow=1000)
colnames(ME) <- c(paste("A",1:12,sep=""),paste("B",1:12,sep=""))
length(which(ME<=0))
keep <- (apply(ME[,1:12],1,mean) > 0) & (apply(ME[,13:24],1,mean) > 0)
length(keep)
sum(keep) #make sure you understand sum() applied to logicals
head(keep)
trimmed <- apply(ME,1,function(ME){mean(ME, trim=0.05)})
function(ME)
trimmed <- apply(ME,1,function(ME){mean(ME, trim=0.05)})
p<-$p.value
p<-$p.value()
q()
compare.hypothesis.tests()
compare.hypothesis.tests <- function(n,y,z,k)
{
sample.size <- n
mean1 <- y
mean2 <- z
standarddev <- k
group1 <- rnorm(n, y, k)
group2 <- rnorm(n, z, k)
framedata <- cbind(group1, group2)
print(framedata)
print( list
(t.test(group1, group2, var.equal = T),
t.test(group1, group2, paired=T),
t.test(group1, group2, var.equal=T, alternative = "less"),
t.test(group1, group2, var.equal=T, alternative = "greater"),
wilcox.test(group1, group2),
wilcox.test(group1, group2, paired=T)))
}
set.seed(570); compare.hypothesis.tests(13,90,100,10)
set.seed(896);
run<- data.frame(time=rnorm(50,mean=50,sd=10),training.method=rep(letters[1:5],each=10));
summary(aov(run$time~run$training.method))
run[1:10,1] <- run[1:10,1] - 15
summary(aov(run$time~run$training.method))
kruskal.test(run$time~run$training.method)
summary(aov(run$time~run$training.method))
count <- 0
variances <- NULL
for (i in 1:5){
count <- count + 1
variances <- c(variances, var(run$time[run$training.method==letters[count]]))
}
variances
sum(variances)/5
count <- 0
means <- NULL
for (i in 1:5){
count <- count + 1
means <- c(means, mean(run$time[run$training.method==letters[count]]))
}
means
var(means) * 10
#Create some data
set.seed(278)
x <- rnorm(25, mean=100, sd=10)
y <- 2 * x + 20 + rnorm(25, mean=10, sd=4)
cor(x,y)  #If you just want the correlation coefficient
cor(x,y)^2 #Or the coefficient of determination
cor(x,y, method="spearman")
cor(x,y, method="spearman")^2
set.seed(570)
group1 <- rnorm(13,90, 10)
group2 <- rnorm(13,100,10)
#So let’s pool the values in one group for a while
group <- c(group1,group2)
dif <- numeric(10000)
for(i in 1:10000){
dif[i]<-mean(sample(group,13,replace=T))-mean(sample(group,13,replace=T))
}
hist(dif)
Fn <- ecdf(dif)
plot(Fn)
measured.dif <- mean(group1)-mean(group2)
Fn(measured.dif)
t.test(group1,group2, var.equal=T)$p.value
t.test(group1,group2, var.equal=T, alternative = "less" )$p.value
groupA <-c(6.29, 6.86, 6.06, 6.64, 6.70, 7.26)
groupB <-c(6.30, 5.83, 6.50, 5.75, 6.24, 5.38)
t.test(group1,group2, var.equal=T)$p.value
t.test(group1,group2, var.equal=T, alternative = "less" )$p.value
(t.test(group1, group2, var.equal = T),
wilcox.test(group1, group2, paired=T)))
Fn(measured.dif)
wilcox.test(group1, group2, paired=T)))
wilcox.test(group1, group2, paired=T))
wilcox.test(group1, group2, paired=T)
dif[i]<-mean(sample(group,13,replace=T))-mean(sample(group,13,replace=T))
wilcox.test(group1, group2, paired=T)))
groupA <-c(6.29, 6.86, 6.06, 6.64, 6.70, 7.26)
Activity <- c( 1, 4, 2, 3, 6, 5)
- unanswered
0.74
groupA <-c(6.29, 6.86, 6.06, 6.64, 6.70, 7.26)
Activity <- c( 1, 4, 2, 3, 6, 5)
- unanswered
0.74
groupA <-c(6.29, 6.86, 6.06, 6.64, 6.70, 7.26)
Activity <- c( 1, 4, 2, 3, 6, 5)
cor(x,y, method="spearman")^2
cor(x,y, method="spearman")
Fn <- ecdf(dif)
Activity <- c( 1, 4, 2, 3, 6, 5)
groupA <-c(6.29, 6.86, 6.06, 6.64, 6.70, 7.26)
Activity <- c( 1, 4, 2, 3, 6, 5)
groupA <-c(6.29, 6.86, 6.06, 6.64, 6.70, 7.26)
groupB <-c(6.30, 5.83, 6.50, 5.75, 6.24, 5.38)
groupC <-c(6.65, 6.10, 5.96, 5.37, 5.74, 5.59)
q()
groupA <-c(6.29, 6.86, 6.06, 6.64, 6.70, 7.26)
groupB <-c(6.30, 5.83, 6.50, 5.75, 6.24, 5.38)
groupC <-c(6.65, 6.10, 5.96, 5.37, 5.74, 5.59)
wilcox.test(group1, group2, paired=T)))
wilcox.test(group1, group2, paired=T)
dif[i]<-mean(sample(group,13,replace=T))-mean(sample(group,13,replace=T))
(t.test(group1, group2, var.equal = T),
(t.test(group1, group2, var.equal = T)
dif[i]<-mean(sample(group,13,replace=T))-mean(sample(group,13,replace=T))
dif[i]<-mean(sample(group,13,replace=T)-mean(sample(group,13,replace=T))
(t.test(group1, group2, var.equal = T)
wilcox.test(group1, group2, paired=T)
wilcox.test(group1, group2, paired=T)))
groupA <-c(6.29, 6.86, 6.06, 6.64, 6.70, 7.26)
groupB <-c(6.30, 5.83, 6.50, 5.75, 6.24, 5.38)
groupC <-c(6.65, 6.10, 5.96, 5.37, 5.74, 5.59)
groupA <-c(6.29, 6.86, 6.06, 6.64, 6.70, 7.26)
groupB <-c(6.30, 5.83, 6.50, 5.75, 6.24, 5.38)
groupC <-c(6.65, 6.10, 5.96, 5.37, 5.74, 5.59)
t.test(group1,group2, var.equal=T)$p.value
t.test(group1,group2, var.equal=T, alternative = "less" )$p.value
summary(aov(run$time~run$training.method))
compare.hypothesis.tests <- function(n,y,z,k)
{
sample.size <- n
mean1 <- y
mean2 <- z
standarddev <- k
group1 <- rnorm(n, y, k)
group2 <- rnorm(n, z, k)
framedata <- cbind(group1, group2)
print(framedata)
print( list
(t.test(group1, group2, var.equal = T),
t.test(group1, group2, paired=T),
t.test(group1, group2, var.equal=T, alternative = "less"),
t.test(group1, group2, var.equal=T, alternative = "greater"),
wilcox.test(group1, group2),
wilcox.test(group1, group2, paired=T)))
t.test(group1, group2, var.equal=T, alternative = "less"),
groupA <-c(6.29, 6.86, 6.06, 6.64, 6.70, 7.26)
groupB <-c(6.30, 5.83, 6.50, 5.75, 6.24, 5.38)
(t.test(group1, group2, var.equal = T),
+ t.test(group1, group2, paired=T),
+ t.test(group1, group2, var.equal=T, alternative = "less"),
+ t.test(group1, group2, var.equal=T, alternative = "greater"),
+ wilcox.test(group1, group2),
+ wilcox.test(group1, group2, paired=T)))
+ t.test(group1, group2, var.equal=T, alternative = "less"),
Error: unexpected ',' in:
(t.test(group1, group2, var.equal = T),
+ t.test(group1, group2, paired=T),
+ t.test(group1, group2, var.equal=T, alternative = "less"),
+ t.test(group1, group2, var.equal=T, alternative = "greater"),
+ wilcox.test(group1, group2),
+ wilcox.test(group1, group2, paired=T)))
+ t.test(group1, group2, var.equal=T, alternative = "less"),
+ t.test(group1, group2, var.equal=T, alternative = "less")
+ t.test(groupA, groupB, var.equal=T, alternative = "less")
t.test(groupA, groupB, var.equal=T, alternative = "less")
+ wilcox.test(group1, group2, paired=T)
wilcox.test(group1, group2, paired=T)
wilcox.test(groupA, groupB, paired=T)
+ t.test(groupA, groupB, var.equal=T, alternative = "greater")
t.test(groupA, groupB, var.equal=T, alternative = "greater")
wilcox.test(groupA, groupB)
+ t.test(group1, group2, paired=T),
?calculation power of t test
?stats()
power.t.test(n = 20, delta = 1)
power.t.test(power = .90, delta = 1)
power.t.test(power = .90, delta = 1, alternative = "one.sided")
power.t.test(power = .80, delta = 0.05, alternative = "one.sided")
measurements <- rnorm(40)^2
?q-q plot
?? q-q plot
?Q-Q plot
help("Q-Q plot()")
??Q-Q plot()
??plot()
qq(x, data, ...)
qq(x, data, ...)
?hist()
?pie()
?qqnorm()
?boxplot()
set.seed(12)
team <- c(rep("A",10),rep("B",10))
time <- c(rnorm(10, mean=40, sd= 10),rnorm(10, mean=40, sd= 10))
place <- rank(time)
results <- data.frame(place, time, team)
plot(time, place, pch=team)
q()
find.package("devtools")
install.package("devtools")
find-rtools()
x <- 4
class(x)
x <- c(4, "a", TRUE)
class(x)
x <- c(1,3, 5)
y <- c(3, 2, 10)
rbind(x, y)
x <- list(2, "a", "b", TRUE)
x[[2]]
x <- 1:4
y <- 2
x + y
x <- c(17, 14, 4, 5, 13, 12, 10)
x[x >= 11] <- 4
x
q()
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
source("submitscript1.R")
dataURL <- "https://d396qusza40orc.cloudfront.net/rprog%2Fdata%2Fspecdata.zip"
> download.file(dataURL, destfile = "specdata.zip")
trying URL 'https://d396qusza40orc.cloudfront.net/rprog%2Fdata%2Fspecdata.zip'
Content type 'application/zip' length 2826323 bytes (2.7 Mb)
opened URL
downloaded 2.7 Mb
> unzip("specdata.zip")
> f <- read.csv("specdata/001.csv", header = T)
> head(f)
unzip(submitscript1.r)
unzip(specdata)
download.file(dataURL, destfile = "specdata.zip")
dataURL <- "https://d396qusza40orc.cloudfront.net/rprog%2Fdata%2Fspecdata.zip"
download.file(dataURL, destfile = "specdata.zip")
download.file(dataURL, destfile = "specdata.zip")
trying URL 'https://d396qusza40orc.cloudfront.net/rprog%2Fdata%2Fspecdata.zip'
Content type 'application/zip' length 2826323 bytes (2.7 Mb)
opened URL
downloaded 2.7 Mb
q()
pollutantmean()
dir
dir()
dir()
dir()
cachematrix.R
dir()
cd git bash vbs
cachematrix.R
dir()
cachematrix.r
q()
